paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z")
, sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
table(my_na)
my_data == NA
sum(my_na)
my_data
0 / 0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foor", "bar")]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, 4, 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patienst, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames("patient", "age", "weight", "bp", "rating", "test")
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
libary(swirl)
library(swirl)
swirl()
install_from_swirl("Open Intro")
swirl()
y <- 100
cars$type
sqrt(y)
z <- sqrt(y)
?sqrt
cars
10
range(cars$price)
sum(cars$price)
sum(cars$price) / 54
mean(cars$price)
mpg.midsize
sort(mpg.midsize)
mpg.sorted <- sort(mpg.midsize)
19
median(mpg.midsize)
summary(cars$mpgCity)
25
19
35
20
sd(mpg.midsize)
sd(mpg.midsize)^2
24
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
library(datasets)
data(iris)
?iris
iris
head(iris)
mean(iris[Sepal.Length, iris$Species = "virginica"])
mean(iris[iris$Species = "virginica"])
mean(iris[iris$Species == "virginica"])
split(iris)
mean(iris[iris$Species == "virginica"])
mean(iris[iris$Species == "virginica", ])
mean(iris[iris$Species == "virginica", ][iris$Sepal.Length, ])
mean(iris[iris$Sepal.Length, ][iris$Species == "virginica", ])
mean(iris)
iris
head(iris)
split(iris)
iris$Species
good <- iris$Species == "virginica"
mean(iris[Sepal.length])
mean(iris[Sepal.len])
head(iris)
mean(iris[Sepal.Length])
mean(iris[Sepal.Length, ])
iris[Sepal.Length, ]
iris["Sepal.Length", ]
iris["Sepal.Length"]
iris["Sepal.Length", ]
iris["Sepal.Length"]
iris["Sepal.Length"][iris$Species == "virginica"]
iris["Sepal.Length"][iris$Species == "virginica", ]
mean(iris["Sepal.Length"][iris$Species == "virginica", ])
colmeans(iris)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
apply(iris, 2, mean)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:5], 2, mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
mtcars
head(mtcars)
mean(mtcars[, "hp"]["cyl" == 4, ])
mtcars["hp"]
mean(mtcars["hp"]["cyl" == 4, ])
mtcars["cyl" == 4, ]
mtcars["cyl" == "4", ]
mtcars[, "cyl" == "4"]
mtcars["cyl" == 4, ]
mtcars["cyl" == "4", ]
mtcars["cyl" == 4, ]
mtcars[, "cyl" == 4]
mtcars["cyl" == 4]
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
mtcars$hp
mtcars$cyl == 4
mtcars["cyl" == 4, "hp"]
mtcars[("cyl" == 4), "hp"]
mtcars["cyl" == 4, ]
mtcars[,"cyl" == 4]
mtcars["hp","cyl" == 4]
mtcars["cyl" == 4]
mtcars["cyl" == 4,]
mtcars[mtcars$cyl == 4,]
mean(mtcars["hp"][mtcars$cyl == 4, ])
mean(mtcars["hp"][mtcars$cyl == 8, ]) - mean(mtcars["hp"][mtcars$cyl == 4, ])
debug(ls)
ls
ls
debug(ls)
ls
ls
debug(-ls)
ls
ls
ls(x)
exit
x
quit
exit
quit
quit
x
iris
mean(mtcars["hp"][mtcars$cyl == 8, ]) - mean(mtcars["hp"][mtcars$cyl == 4, ])
mean(mtcars["hp"][mtcars$cyl == 8]) - mean(mtcars["hp"][mtcars$cyl == 4])
require(graphics)
pairs(mtcars, main = "mtcars data")
coplot(mpg ~ disp | as.factor(cyl), data = mtcars,
panel = panel.smooth, rows = 1)
head(mtcars)
warnings()
head(mtcars)
datasets
datasets()
library(datasets)
datasets
?datasets
library(help = "datasets")
### Introduction
## The makeCacheMatrix and cacheSolve functions beneath create a special
## "matrix" with cache functionality to lower computation time when
## calculating the inverse of a matrix.
# makeCacheMatrix creates a special "matrix", which is a list containing
# 4 functions to (1-2) set and get the value of the matrix and
# (3-4) set and get the inverse of the matrix.
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
# cacheSolve returns the inverse of the special "matrix" created with
# makeCacheMatrix. It gets this either from cache (getinverse) or
# computes it and then puts it in the cache (setinverse).
cacheSolve <- function(x, ...) {
i <- x$getinverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data, ...)
x$setinverse(i)
i
}
makeCacheMatrix(x)
makeCacheMatrix()
x <- [2:2][2:2]
x <- matrix(1:9, nrow = 3, ncol = 3)
x
makeCacheMatrix(x)
x$set(x)
x$get()
m <- makeCacheMatrix(x)
m
m$get()
m$getinverse()
cacheSolve(m)
x <- matrix(2:10, nrow = 3, ncol = 3)
m <- makeCacheMatrix(x)
cacheSolve(m)
x <- matrix(c(3,5,7,2), nrow = 2, ncol = 2)
m <- makeCacheMatrix(x)
m$get()
x <- matrix(c(3,5,-7,2), nrow = 2, ncol = 2)
m <- makeCacheMatrix(x)
x <- matrix(c(3,5,-7,2), nrow = 2, ncol = 2)
m <- makeCacheMatrix(x)
m$get()
cacheSolve(m)
x$getinverse()
m$getinverse()
x
i
m <- makeCacheMatrix(x)
m$getinverse()
cacheSolve(m)
set.seed(1)
x <- rnorm(100)
e <- rnorm(100, 0, 2)
y <- 0.5 + 2 * x + e
plot(x, y)
summary(y)
plot(x, y)
plot(x, y)
plot(x, y)
plot(x, y)
plot(x, y)
plot(x, y)
plot(x, y)
dev.off()
plot(x, y)
dev.off()
dev.off(1)
dev.off(0)
dev.off(null)
plot(x, y)
plot(x, y)
?dist
?sum
# simple lap speed calculator
dist <- c(0, 3.35, 1.85, 1.70)
time <- c(0, 19.04, 10.55, 10.26)
dist[1] <- sum(dist)
time[1] <- sum(time)
speed <- dist / time
table <- c(dist, time, speed)
print(table)
# simple lap speed calculator
dist <- c(0, 3.35, 1.85, 1.70)
time <- c(0, 19.04, 10.55, 10.26)
dist[1] <- sum(dist)
time[1] <- sum(time)
speed <- dist / time
table <- cbind(dist, time, speed)
print(table)
?round
# simple lap speed calculator
dist <- c(0, 3.35, 1.85, 1.70)
time <- c(0, 19.04, 10.55, 10.26)
dist[1] <- sum(dist)
time[1] <- sum(time)
speed <- round(dist / time * 3600, digits = 2)
table <- cbind(dist, time, speed)
print(table)
# simple lap speed calculator
dist <- c(0, 3.35, 1.85, 1.70)
time <- c(0, 19 + 4/60, 10 + 55/60, 10 + 26/60)
dist[1] <- sum(dist)
time[1] <- sum(time)
speed <- round(dist / time * 60, digits = 2)
table <- cbind(dist, time, speed)
print(table)
# simple lap speed calculator
dist <- c(0, 3.35, 1.85, 1.70)
time <- c(0, 19 + 4/60, 10 + 55/60, 10 + 26/60)
dist <- round(dist, digits = 2)
time <- round(time, digits = 2)
dist[1] <- sum(dist)
time[1] <- sum(time)
speed <- round(dist / time * 60, digits = 2)
table <- cbind(dist, time, speed)
print(table)
# simple lap speed calculator
dist <- c(0, 3.34, 1.84, 1.72)
time <- c(0, 19 + 4/60, 10 + 55/60, 10 + 26/60)
dist <- round(dist, digits = 2)
time <- round(time, digits = 2)
dist[1] <- sum(dist)
time[1] <- sum(time)
speed <- round(dist / time * 60, digits = 2)
table <- cbind(dist, time, speed)
print(table)
# simple lap speed calculator
dist <- c(0, 3.34, 1.84, 1.72)
time <- c(0, 19 + 4/60, 10 + 55/60, 10 + 26/60)
dist <- round(dist, digits = 2)
time <- round(time, digits = 2)
dist[1] <- sum(dist)
time[1] <- sum(time)
speed <- round(dist / time * 60, digits = 2)
table <- cbind(dist, time, speed)
print(table)
##
## archive
##
#  2014/08/10
#  dist <- c(0, 3.34, 1.84, 1.72)
#  time <- c(0, 19 + 4/60, 10 + 55/60, 10 + 26/60)
# simple lap speed calculator
dist <- c(0, 3.34, 1.84, 1.72)
time <- c(0, 19 + 44/60, 10 + 56/60, 10 + 16/60)
dist <- round(dist, digits = 2)
time <- round(time, digits = 2)
dist[1] <- sum(dist)
time[1] <- sum(time)
speed <- round(dist / time * 60, digits = 2)
table <- cbind(dist, time, speed)
# simple lap speed calculator
dist <- c(0, 3.34, 1.84, 1.72)
time <- c(0, 19 + 44/60, 10 + 56/60, 10 + 16/60)
dist <- round(dist, digits = 2)
time <- round(time, digits = 2)
dist[1] <- sum(dist)
time[1] <- sum(time)
speed <- round(dist / time * 60, digits = 2)
table <- cbind(dist, time, speed)
print(table)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(nlme)
?lattice
str(BodyWeight)
?trellis.par.set
?splom
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
install.packages("ggplot2")
library(ggplot2)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + stats_smooth("loess")
# simple lap speed calculator
dist <- c(0, 3.34, 4.44, 1.27)
time <- c(0, 19 + 10/60, 27 + 20/60, 7 + 48/60)
dist <- round(dist, digits = 2)
time <- round(time, digits = 2)
dist[1] <- sum(dist)
time[1] <- sum(time)
speed <- round(dist / time * 60, digits = 2)
table <- cbind(dist, time, speed)
print(table)
##
## archive
##
#  2014/08/27
#  dist <- c(0, 3.34, 4.44, 1.27)
#  time <- c(0, 19 + 48/60, 27 + 54/60, 7 + 39/60)
#
##
#  2014/08/23
#  dist <- c(0, 3.34, 4.44, 1.27)
#  time <- c(0, 19 + 48/60, 27 + 54/60, 7 + 39/60)
#
##  2014/08/13
#  dist <- c(0, 3.34, 1.84, 1.72)
#  time <- c(0, 19 + 44/60, 10 + 56/60, 10 + 16/60)
#
#  2014/08/10
#  dist <- c(0, 3.34, 1.84, 1.72)
#  time <- c(0, 19 + 4/60, 10 + 55/60, 10 + 26/60)
#
# simple lap speed calculator
dist <- c(0, 3.34, 4.44, 1.27)
time <- c(0, 19 + 10/60, 27 + 20/60, 7 + 48/60)
dist <- round(dist, digits = 2)
time <- round(time, digits = 2)
dist[1] <- sum(dist)
time[1] <- sum(time)
speed <- round(dist / time * 60, digits = 2)
table <- cbind(dist, time, speed)
print(table)
ppois(3, lambda = 2.5 * 4)
ppois(10, lambda = 5 * 3)
choose(8, 7) * 0.5^8 + choose(8, 8) * 0.5^8
choose(5, 4) * 0.5^5 + choose(5, 5) * 0.5^5
setwd("C:/Users/Martin/Box Sync/Programming/GitHub/StatInf_Assessment")
library(datasets)
?datasets
library(help="datasets")
library(help="datasets")
x <- ToothGrowth
View(x)
library(datasets)
summary(ToothGrowth)
str(ToothGrowth)
plot((ToothGrowth[, 1:3] + 1))
hist(len)
hist(dose)
?with
with(ToothGrowth, {
hist(len)
hist(dose)
})
plot(len, dose)
with(ToothGrowth, {
hist(len)
hist(dose)
plot(len, dose)
})
TG13 <- subset(ToothGrowth, supp %in% c("OJ", "VC"))
t.test(len ~ supp, paired = FALSE, var.equal = TRUE, data = TG13)
TG12 <- subset(ToothGrowth, dose %in% c(0.5, 1.0))
t.test(len ~ supp, paired = FALSE, var.equal = TRUE, data = TG12)
TG12 <- subset(ToothGrowth, dose %in% c(0.5, 1.0))
t.test(len ~ supp, paired = FALSE, var.equal = TRUE, data = TG12)
TG13 <- subset(ToothGrowth, dose %in% c(0.5, 2.0))
t.test(len ~ supp, paired = FALSE, var.equal = TRUE, data = TG12)
TG23 <- subset(ToothGrowth, dose %in% c(1.0, 2.0))
t.test(len ~ supp, paired = FALSE, var.equal = TRUE, data = TG12)
TG12 <- subset(ToothGrowth, dose %in% c(0.5, 1.0))
t.test(len ~ dose, paired = FALSE, var.equal = TRUE, data = TG12)
TG13 <- subset(ToothGrowth, dose %in% c(0.5, 2.0))
t.test(len ~ dose, paired = FALSE, var.equal = TRUE, data = TG13)
TG23 <- subset(ToothGrowth, dose %in% c(1.0, 2.0))
t.test(len ~ dose, paired = FALSE, var.equal = TRUE, data = TG23)
TGsupp <- subset(ToothGrowth, supp %in% c("OJ", "VC"))
t.test(len ~ supp, paired = FALSE, var.equal = TRUE, data = TGsupp)
TG12 <- subset(ToothGrowth, dose %in% c(0.5, 1.0))
t.test(len ~ dose, paired = FALSE, var.equal = TRUE, data = TG12)
TG13 <- subset(ToothGrowth, dose %in% c(0.5, 2.0))
t.test(len ~ dose, paired = FALSE, var.equal = TRUE, data = TG13)
TG23 <- subset(ToothGrowth, dose %in% c(1.0, 2.0))
t.test(len ~ dose, paired = FALSE, var.equal = TRUE, data = TG23)
