ls
ls
debug(ls)
ls
ls
debug(-ls)
ls
ls
ls(x)
exit
x
quit
exit
quit
quit
x
iris
mean(mtcars["hp"][mtcars$cyl == 8, ]) - mean(mtcars["hp"][mtcars$cyl == 4, ])
mean(mtcars["hp"][mtcars$cyl == 8]) - mean(mtcars["hp"][mtcars$cyl == 4])
require(graphics)
pairs(mtcars, main = "mtcars data")
coplot(mpg ~ disp | as.factor(cyl), data = mtcars,
panel = panel.smooth, rows = 1)
head(mtcars)
warnings()
head(mtcars)
datasets
datasets()
library(datasets)
datasets
?datasets
library(help = "datasets")
### Introduction
## The makeCacheMatrix and cacheSolve functions beneath create a special
## "matrix" with cache functionality to lower computation time when
## calculating the inverse of a matrix.
# makeCacheMatrix creates a special "matrix", which is a list containing
# 4 functions to (1-2) set and get the value of the matrix and
# (3-4) set and get the inverse of the matrix.
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
# cacheSolve returns the inverse of the special "matrix" created with
# makeCacheMatrix. It gets this either from cache (getinverse) or
# computes it and then puts it in the cache (setinverse).
cacheSolve <- function(x, ...) {
i <- x$getinverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data, ...)
x$setinverse(i)
i
}
makeCacheMatrix(x)
makeCacheMatrix()
x <- [2:2][2:2]
x <- matrix(1:9, nrow = 3, ncol = 3)
x
makeCacheMatrix(x)
x$set(x)
x$get()
m <- makeCacheMatrix(x)
m
m$get()
m$getinverse()
cacheSolve(m)
x <- matrix(2:10, nrow = 3, ncol = 3)
m <- makeCacheMatrix(x)
cacheSolve(m)
x <- matrix(c(3,5,7,2), nrow = 2, ncol = 2)
m <- makeCacheMatrix(x)
m$get()
x <- matrix(c(3,5,-7,2), nrow = 2, ncol = 2)
m <- makeCacheMatrix(x)
x <- matrix(c(3,5,-7,2), nrow = 2, ncol = 2)
m <- makeCacheMatrix(x)
m$get()
cacheSolve(m)
x$getinverse()
m$getinverse()
x
i
m <- makeCacheMatrix(x)
m$getinverse()
cacheSolve(m)
set.seed(1)
x <- rnorm(100)
e <- rnorm(100, 0, 2)
y <- 0.5 + 2 * x + e
plot(x, y)
summary(y)
plot(x, y)
plot(x, y)
plot(x, y)
plot(x, y)
plot(x, y)
plot(x, y)
plot(x, y)
dev.off()
plot(x, y)
dev.off()
dev.off(1)
dev.off(0)
dev.off(null)
plot(x, y)
plot(x, y)
?dist
?sum
# simple lap speed calculator
dist <- c(0, 3.35, 1.85, 1.70)
time <- c(0, 19.04, 10.55, 10.26)
dist[1] <- sum(dist)
time[1] <- sum(time)
speed <- dist / time
table <- c(dist, time, speed)
print(table)
# simple lap speed calculator
dist <- c(0, 3.35, 1.85, 1.70)
time <- c(0, 19.04, 10.55, 10.26)
dist[1] <- sum(dist)
time[1] <- sum(time)
speed <- dist / time
table <- cbind(dist, time, speed)
print(table)
?round
# simple lap speed calculator
dist <- c(0, 3.35, 1.85, 1.70)
time <- c(0, 19.04, 10.55, 10.26)
dist[1] <- sum(dist)
time[1] <- sum(time)
speed <- round(dist / time * 3600, digits = 2)
table <- cbind(dist, time, speed)
print(table)
# simple lap speed calculator
dist <- c(0, 3.35, 1.85, 1.70)
time <- c(0, 19 + 4/60, 10 + 55/60, 10 + 26/60)
dist[1] <- sum(dist)
time[1] <- sum(time)
speed <- round(dist / time * 60, digits = 2)
table <- cbind(dist, time, speed)
print(table)
# simple lap speed calculator
dist <- c(0, 3.35, 1.85, 1.70)
time <- c(0, 19 + 4/60, 10 + 55/60, 10 + 26/60)
dist <- round(dist, digits = 2)
time <- round(time, digits = 2)
dist[1] <- sum(dist)
time[1] <- sum(time)
speed <- round(dist / time * 60, digits = 2)
table <- cbind(dist, time, speed)
print(table)
# simple lap speed calculator
dist <- c(0, 3.34, 1.84, 1.72)
time <- c(0, 19 + 4/60, 10 + 55/60, 10 + 26/60)
dist <- round(dist, digits = 2)
time <- round(time, digits = 2)
dist[1] <- sum(dist)
time[1] <- sum(time)
speed <- round(dist / time * 60, digits = 2)
table <- cbind(dist, time, speed)
print(table)
# simple lap speed calculator
dist <- c(0, 3.34, 1.84, 1.72)
time <- c(0, 19 + 4/60, 10 + 55/60, 10 + 26/60)
dist <- round(dist, digits = 2)
time <- round(time, digits = 2)
dist[1] <- sum(dist)
time[1] <- sum(time)
speed <- round(dist / time * 60, digits = 2)
table <- cbind(dist, time, speed)
print(table)
##
## archive
##
#  2014/08/10
#  dist <- c(0, 3.34, 1.84, 1.72)
#  time <- c(0, 19 + 4/60, 10 + 55/60, 10 + 26/60)
# simple lap speed calculator
dist <- c(0, 3.34, 1.84, 1.72)
time <- c(0, 19 + 44/60, 10 + 56/60, 10 + 16/60)
dist <- round(dist, digits = 2)
time <- round(time, digits = 2)
dist[1] <- sum(dist)
time[1] <- sum(time)
speed <- round(dist / time * 60, digits = 2)
table <- cbind(dist, time, speed)
# simple lap speed calculator
dist <- c(0, 3.34, 1.84, 1.72)
time <- c(0, 19 + 44/60, 10 + 56/60, 10 + 16/60)
dist <- round(dist, digits = 2)
time <- round(time, digits = 2)
dist[1] <- sum(dist)
time[1] <- sum(time)
speed <- round(dist / time * 60, digits = 2)
table <- cbind(dist, time, speed)
print(table)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(nlme)
?lattice
str(BodyWeight)
?trellis.par.set
?splom
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
install.packages("ggplot2")
library(ggplot2)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + stats_smooth("loess")
# simple lap speed calculator
dist <- c(0, 3.34, 4.44, 1.27)
time <- c(0, 19 + 10/60, 27 + 20/60, 7 + 48/60)
dist <- round(dist, digits = 2)
time <- round(time, digits = 2)
dist[1] <- sum(dist)
time[1] <- sum(time)
speed <- round(dist / time * 60, digits = 2)
table <- cbind(dist, time, speed)
print(table)
##
## archive
##
#  2014/08/27
#  dist <- c(0, 3.34, 4.44, 1.27)
#  time <- c(0, 19 + 48/60, 27 + 54/60, 7 + 39/60)
#
##
#  2014/08/23
#  dist <- c(0, 3.34, 4.44, 1.27)
#  time <- c(0, 19 + 48/60, 27 + 54/60, 7 + 39/60)
#
##  2014/08/13
#  dist <- c(0, 3.34, 1.84, 1.72)
#  time <- c(0, 19 + 44/60, 10 + 56/60, 10 + 16/60)
#
#  2014/08/10
#  dist <- c(0, 3.34, 1.84, 1.72)
#  time <- c(0, 19 + 4/60, 10 + 55/60, 10 + 26/60)
#
# simple lap speed calculator
dist <- c(0, 3.34, 4.44, 1.27)
time <- c(0, 19 + 10/60, 27 + 20/60, 7 + 48/60)
dist <- round(dist, digits = 2)
time <- round(time, digits = 2)
dist[1] <- sum(dist)
time[1] <- sum(time)
speed <- round(dist / time * 60, digits = 2)
table <- cbind(dist, time, speed)
print(table)
ppois(3, lambda = 2.5 * 4)
ppois(10, lambda = 5 * 3)
choose(8, 7) * 0.5^8 + choose(8, 8) * 0.5^8
choose(5, 4) * 0.5^5 + choose(5, 5) * 0.5^5
?t.test
t.test(1100)
mn <- mean(difference); s <- sd(difference); n <- 10
mn + c(-1, 1) * qt(.975, n-1) * s / sqrt(n)
mn <- 1100; s <- 30; n <- 9
mn + c(-1, 1) * qt(.975, n-1) * s / sqrt(n)
mn <- -2; s <- 2.60; n <- 9
mn + c(-1, 1) * qt(.975, n-1) * s / sqrt(n)
mn <- -2; s <- 2.10; n <- 9
mn + c(-1, 1) * qt(.975, n-1) * s / sqrt(n)
mn <- -2; s <- 2.60; n <- 9
mn + c(-1, 1) * qt(.975, n-1) * s / sqrt(n)
mn <- -2; s <- 0.64; n <- 20
mn <- -2; s <- 0.64; n <- 10
mn + c(-1, 1) * qt(.975, n-1) * s / sqrt(n)
sp <- sqrt((9 * 0.60^2 + 9 * 0.68^2) / (9 + 9 - 2))
3 - 5 + c(-1, 1) * qt(.975, 27) * sp * (1 / 9 + 1 / 9)^.5
sp <- sqrt((9 * 0.60^2 + 9 * 0.68^2) / (10 + 10 - 2))
3 - 5 + c(-1, 1) * qt(.975, 27) * sp * (1 / 9 + 1 / 9)^.5
3 - 5 + c(-1, 1) * qt(.975, 18) * sp * (1 / 9 + 1 / 9)^.5
3 - 5 + c(-1, 1) * qt(.975, 18) * sp * (1 / 10 + 1 / 10)^.5
sp <- sqrt((9 * 0.60^2 + 9 * 0.68^2) / (10 + 10 - 2))
3 - 5 + c(-1, 1) * qt(.975, 18) * sp * (1 / 10 + 1 / 10)^.5
3 - 5 + c(-1, 1) * qt(.975, 18) * 0.64 * (1 / 10 + 1 / 10)^.5
?z.test
?p.test
?p.value
sp2 <- sqrt(200)
sp2 <- sqrt((99 * 0.5^2 + 99 * 2^2) / (100 + 100 - 2))
4 - 6 + c(-1, 1) * qnorm(.975) * sp2 * (1 / 100 + 1 / 100)^.5
6 - 4 + c(-1, 1) * qnorm(.975) * sp2 * (1 / 100 + 1 / 100)^.5
sp3 <- sqrt((8 * 1.5^2 + 8 * 1.8^2) / (9 + 9 - 2))
-3 - 1 + c(-1, 1) * qt(.95, 16) * sp3 * (1 / 9 + 1 / 9)^.5
setwd("C:/Users/Martin/Box Sync/Programming/GitHub/StatInf_Assessment")
rexp(40,0.2)
?sample
?rep
rep(rexp(n,lambda), 2)
rep(rexp(40,0.2),2)
```{r}
set.seed(123)
lambda <- 0.2
n <- 40
B <- 1000
```
set.seed(123)
lambda <- 0.2
n <- 40
B <- 1000
?apply
?sapply
set.seed(123)
lambda <- 0.2
n <- 40
B <- 10
samples <- matrix(sapply(1:B, rexp(n, lambda)), B, n)
samples <- matrix(sapply(1:B, function(i) rexp(n, lambda)), B, n)
View(samples)
means <- apply(samples, 1, mean)
?apply
samples <- matrix(sapply(1:B, function(i) rexp(n, lambda)), B, n)
means <- apply(samples, 1, mean)
mean(means)
mean(means)
1 / lambda
c(mean(means), 1 / lambda)
set.seed(123)
lambda <- 0.2
n <- 40
B <- 1000
samples <- matrix(sapply(1:B, function(i) rexp(n, lambda)), B, n)
means <- apply(samples, 1, mean)
c(mean(means), 1 / lambda)
set.seed(123)
lambda <- 0.2
n <- 40
B <- 1000
samples <- matrix(sapply(1:B, function(i) rexp(n, lambda)), B, n)
means <- apply(samples, 1, mean)
c(mean(means), 1 / lambda)
?var
sds <- apply(samples, 1, sds)
c(mean(sds), 1 / lambda)
sds <- apply(samples, 1, sd)
c(mean(sds), 1 / lambda)
sds <- apply(samples, 1, sd)
c(mean(sds), 1 / lambda)
hist(means)
?norm.dist
?norm
?normal distribution
?qnorm
plot(zvals, dnorm(zvals),
type = "l", lwd = 3, frame = FALSE, xlab = "z", ylab = "Density")
zvals <- seq(3, 8, length = 1000)
plot(zvals, dnorm(zvals),
type = "l", lwd = 3, frame = FALSE, xlab = "z", ylab = "Density")
plot(zvals, dnorm(zvals, mean = 1/lambda, sd = 1/lambda),
type = "l", lwd = 3, frame = FALSE, xlab = "z", ylab = "Density")
?dnorm()
hist(means)
zvals <- seq(3, 8, length = 1000)
plot(zvals, dnorm(zvals, mean = 1/lambda, sd = 1/lambda),
type = "l", lwd = 3, frame = FALSE, xlab = "z", ylab = "Density")
hist(means)
zvals <- seq(3, 8, length = 1000)
line(zvals, dnorm(zvals, mean = 1/lambda, sd = 1/lambda))
?plot
lines(zvals, dnorm(zvals, mean = 1/lambda, sd = 1/lambda))
lines(zvals, dnorm(zvals, mean = 1/lambda, sd = 1/lambda))
hist(means/10000)
zvals <- seq(3, 8, length = 1000)
lines(zvals, dnorm(zvals, mean = 1/lambda, sd = 1/lambda))
hist(means)
hist(means)
zvals <- seq(3, 8, length = 1000)
lines(zvals, B * dnorm(zvals, mean = 1/lambda, sd = 1/lambda))
hist(means)
zvals <- seq(2, 8, length = 1000)
lines(zvals, B * dnorm(zvals, mean = 1/lambda, sd = 1/lambda))
?dnorm
lines(zvals, B * dnorm(zvals, mean = 1/lambda, sd = 1/lambda)/40)
lines(zvals, B * dnorm(zvals, mean = 1/lambda, sd = 1/lambda/n))
hist(means)
zvals <- seq(2, 8, length = 1000)
lines(zvals, B * dnorm(zvals, mean = 1/lambda, sd = 1/lambda / sqrt(n)))
hist(means)
zvals <- seq(2, 8, length = 10000)
lines(zvals, B * dnorm(zvals, mean = 1/lambda, sd = 1/lambda / sqrt(n)))
pvals <- seq(0.025, 0.975, by = 0.025)
head(pvals)
?rexp
pvals <- seq(0.025, 0.975, by = 0.025)
coverage <- sapply(pvals, function(p) {
phats <- sapply(1:B, function(i) rexp(n, lambda))
ll <- phats - qnorm(0.975) * sqrt(phats * (1 - phats)/n)
ul <- phats + qnorm(0.975) * sqrt(phats * (1 - phats)/n)
mean(ll < p & ul > p)
})
warnings()
phats <- sapply(1:B, function(i) rexp(n, lambda))
head(phats)?
h
head(phats)
rbinom(nosim, prob = p, size = n)/n
phats <- sapply(1:B, function(i) rexp(n, lambda)) / 40
coverage <- sapply(pvals, function(p) {
phats <- sapply(1:B, function(i) rexp(n, lambda)) / 40
ll <- phats - qnorm(0.975) * sqrt(phats * (1 - phats)/n)
ul <- phats + qnorm(0.975) * sqrt(phats * (1 - phats)/n)
mean(ll < p & ul > p)
}
)
n <- 20
pvals <- seq(0.1, 0.9, by = 0.05)
nosim <- 1000
coverage <- sapply(pvals, function(p) {
phats <- rbinom(nosim, prob = p, size = n)/n
ll <- phats - qnorm(0.975) * sqrt(phats * (1 - phats)/n)
ul <- phats + qnorm(0.975) * sqrt(phats * (1 - phats)/n)
mean(ll < p & ul > p)
})
plot(coverage)
plot(coverage, "l")
plot(coverage, type = "l")
View(phats)
means
means[2]
coverage <- sapply(1:1000, function(p) {
ll <- means[p] - qnorm(0.975) * sqrt(means * (1 - means)/n)
ul <- means[p] + qnorm(0.975) * sqrt(means * (1 - means)/n)
mean(ll < p & ul > p)
})
coverage <- sapply(1:1000, function(n) {
ll <- 1/lambda - qnorm(0.975) / sqrt(n)
ul <- 1/lambda + qnorm(0.975) / sqrt(n)
mean(ll < means[n] & ul > means[n])
})
coverage <- sapply(1:1000, function(n) {
ll <- 1/lambda - qnorm(0.975) / sqrt(n)
ul <- 1/lambda + qnorm(0.975) / sqrt(n)
mean(ll < means[n] & ul > means[n])
})
mean(coverage)
coverage <- sapply(1:1000, function(n) {
ll <- 1/lambda - qnorm(0.975) * 1/lambda / sqrt(n)
ul <- 1/lambda + qnorm(0.975) * 1/lambda / sqrt(n)
mean(ll < means[n] & ul > means[n])
})
mean(coverage)
summary(coverage)
coverage <- sapply(1:1000, function(n) {
ll <- 1/lambda - qnorm(0.975) * (1/lambda) / sqrt(n)
ul <- 1/lambda + qnorm(0.975) * (1/lambda) / sqrt(n)
mean(ll < means[n] & ul > means[n])
})
mean(coverage)
coverage <- sapply(1:1000, function(n) {
ll <- 1/lambda - qnorm(0.975) * 1/lambda / sqrt(n)
ul <- 1/lambda + qnorm(0.975) * 1/lambda / sqrt(n)
ll < means[n] & ul > means[n]
})
mean(coverage)
tail(coverage)
coverage <- sapply(1:1000, function(n) {
ll <- means[n] - qnorm(0.975) * sds[n] / sqrt(n)
ul <- means[n] + qnorm(0.975) * sds[n] / sqrt(n)
ll < 1/lambda & ul > 1/lambda]
})
mean(coverage)
coverage <- sapply(1:1000, function(n) {
ll <- means[n] - qnorm(0.975) * sds[n] / sqrt(n)
ul <- means[n] + qnorm(0.975) * sds[n] / sqrt(n)
ll < 1/lambda & ul > 1/lambda
})
mean(coverage)
sds[1]
n <- 2
ll <- means[n] - qnorm(0.975) * sds[n] / sqrt(n)
ul <- means[n] + qnorm(0.975) * sds[n] / sqrt(n)
n <- 1000
ll <- means[n] - qnorm(0.975) * sds[n] / sqrt(n)
ul <- means[n] + qnorm(0.975) * sds[n] / sqrt(n)
sds[n]
means[n]
set.seed(123)
lambda <- 0.2
n <- 40
B <- 1000
coverage <- sapply(1:1000, function(i) {
ll <- means[i] - qnorm(0.975) * sds[i] / sqrt(n)
ul <- means[i] + qnorm(0.975) * sds[i] / sqrt(n)
ll < 1/lambda & ul > 1/lambda
})
mean(coverage)
